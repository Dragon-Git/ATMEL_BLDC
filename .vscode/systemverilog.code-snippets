{
	// Place your systemverilog snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"UVM Info": {
		"prefix": "p-info",
		"body": [
			"`uvm_info(get_full_name(), \"${1}\", UVM_LOW)",
		],
		"description": "Insert an uvm_info macro"
	},

	"UVM Error": {  
		"prefix": "p-error",  
		"body": [  
		  "`uvm_error(get_full_name(), \"${1:ERROR_MESSAGE}\")"  
		],  
		"description": "Insert an uvm_error macro"  
	},
	  
	"UVM Fatal": {  
		"prefix": "p-fatal",  
		"body": [  
		  "`uvm_fatal(get_full_name(), \"${1:FATAL_MESSAGE}\")"  
		],  
		"description": "get_full_name()"  
	},

	"UVM Warning": {
		"prefix": "p-warn",
		"body": [
			"`uvm_warning(get_full_name(), \"${1}\")"
		],
		"description": "Insert an uvm_warning macro"
	},
	"UVM object new": {
		"prefix": "p-objnew",
		"body": [
		  "    function new (string name=\"\");",
		  "      super.new(name);",
		  "    endfunction : new"
		],
		"description": "UVM object new"
	},
	"UVM object create": {
		"prefix": "p-objcreate",
		"body": [
		  "${1} = ${2}::type_id::create(\"${1}\");"
		],
		"description": "UVM object create"
	},
	"UVM component create": {
		"prefix": "p-copcreate",
		"body": [
		  "${1} = ${2}::type_id::create(\"${1}\", this);"
		],
		"description": "UVM component create"
	},
	"uvm_component_utils": {
		"prefix": "p-component_utils",
		"body": [
			"`uvm_component_utils($TM_FILENAME_BASE)",
			"\n",
		],
		"description": "Insert a uvm_component_utils macro"
	},
	"UVM downcast": {
		"prefix": "p-downcast",
		"body": [
		  "    begin",
		  "      if (!\\$cast(${1:EXT_}, ${2:BASE_})) begin",
		  "        `uvm_error(get_type_name(), $sformatf(\"Cast failed: base class variable %0s does not hold extended class %0s handle\", ",
		  "            ${2:BASE_}, ${1:EXT_}))",
		  "      end",
		  "    end"
		],
		"description": "UVM downcast"
	  }
}
