{
	// Place your systemverilog snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"UVM Info": {
		"prefix": "p-info",
		"body": [
			"`uvm_info(get_full_name(), \"${1}\", UVM_LOW)",
		],
		"description": "Insert an uvm_info macro"
	},

	"UVM Error": {  
		"prefix": "p-error",  
		"body": [  
		  "`uvm_error(get_full_name(), \"${1:ERROR_MESSAGE}\")"  
		],  
		"description": "Insert an uvm_error macro"  
	},
	  
	"UVM Fatal": {  
		"prefix": "p-fatal",  
		"body": [  
		  "`uvm_fatal(get_full_name(), \"${1:FATAL_MESSAGE}\")"  
		],  
		"description": "get_full_name()"  
	},

	"UVM Warning": {
		"prefix": "p-warn",
		"body": [
			"`uvm_warning(get_full_name(), \"${1}\")"
		],
		"description": "Insert an uvm_warning macro"
	},
	"UVM object new": {
		"prefix": "p-objnew",
		"body": [
		  "    function new (string name=\"\");",
		  "      super.new(name);",
		  "    endfunction : new"
		],
		"description": "UVM object new"
	},
	"UVM object and component create": {
		"prefix": "p-create",
		"body": [
		  "${1} = ${2}::type_id::create(\"${1}\"${3| ,\\, this|});"
		],
		"description": "UVM object and component create"
	},
        "UVM object create": {                                                                                                 
                "prefix": "p-objcreate",                                                                                       
                "body": [                                                                                                      
                  "${1} = ${2}::type_id::create(\"${1}\");"                                                                    
                ],                                                                                                             
                "description": "UVM object create"                                                                             
        },                                                                                                                     
	"UVM component create": {
		"prefix": "p-copcreate",
		"body": [
		  "${1} = ${2}::type_id::create(\"${1}\", this);"
		],
		"description": "UVM component create"
	},
	"uvm_component_utils": {
		"prefix": "p-component_utils",
		"body": [
			"`uvm_component_utils($TM_FILENAME_BASE)",
			"\n",
		],
		"description": "Insert a uvm_component_utils macro"
	},
	"UVM downcast": {
		"prefix": "p-downcast",
		"body": [
		  "    begin",
		  "      if (!\\$cast(${1:EXT_}, ${2:BASE_})) begin",
		  "        `uvm_error(get_type_name(), $sformatf(\"Cast failed: base class variable %0s does not hold extended class %0s handle\", ",
		  "            ${2:BASE_}, ${1:EXT_}))",
		  "      end",
		  "    end"
		],
		"description": "UVM downcast"
	},
	"UVM import": {
		"prefix": "p-import",
		"body": [
		  "import uvm_pkg::*;",
		  "`include \"uvm_macro.sv\""
		],
		"description": "UVM import"
	},
	"SV class function": {
		"prefix": "p-singleton",
		"body": [
		  "  static local $TM_FILENAME_BASE m_inst;",
		  "",
		  "  // Group -- NODOCS -- Singleton ",
		  "",
		  "  // Function -- NODOCS -- get_inst",
		  "  //",
		  "  // Returns the singleton instance of the $TM_FILENAME_BASE.",
		  "",
		  "  static function $TM_FILENAME_BASE get_inst();",
		  "    if(m_inst == null) ",
		  "      m_inst = new(\"$TM_FILENAME_BASE\");",
		  "    return m_inst;",
		  "  endfunction: $TM_FILENAME_BASE"
		],
		"description": "SV class function"
	},
	"SV macro": {
		"prefix": "p-headmacro",
		"body": [
		  "`ifndef ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}__SV",
		  "`define ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}__SV",
		  "${1}",
		  "// ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}__SV"
		],
		"description": "SV macro for compilation"
	},
	"UVM class": {
		"prefix": "p-class",
		"body": [
		  "`ifndef ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}__SV",
		  "`define ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}__SV",
		  "class $TM_FILENAME_BASE extend uvm_${TM_FILENAME_BASE/[^_]+_//g};",
		  "    ${2://declear vars}",
		  "    `uvm_${3|component,object|}_utils($TM_FILENAME_BASE)",
		  "    // `uvm_new_func",
		  "    function new (string name);",
		  "      super.new(name);",
		  "    endfunction : new",
		  "",
		  "endclass: $TM_FILENAME_BASE",
		  "`endif // ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}__SV",
		  ""
		],
		"description": "UVM class"
	  },
}
